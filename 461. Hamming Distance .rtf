{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red255\green255\blue255;\red67\green91\blue103;
}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c32941\c43137\c47843;
}
\margl1440\margr1440\vieww7700\viewh17500\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
461.\'a0Hamming Distance\
\pard\pardeftab720\sl400\partightenfactor0

\f1\b0\fs24 \cf4 \cb1 \
class Solution \{\
    public int hammingDistance(int x, int y) \{\
        String a = Integer.toBinaryString(x);\
        String b = Integer.toBinaryString(y);\
        \
        char[] arr1 = a.toCharArray(); \
        char[] arr2 = b.toCharArray(); \
        \
        if(arr1.length < arr2.length)\{\
            arr1 = fillInZero(arr1, arr2.length);\
        \} else \{\
            arr2 = fillInZero(arr2, arr1.length);\
        \}\
        \
        int count = 0;\
        for(int i = 0; i < arr1.length; i++)\{\
            if(arr1[i] != arr2[i])\{\
                count++;\
            \}\
        \}\
            \
        return count;\
    \}\
    \
    public char[] fillInZero(char[] arr, int size)\{\
        char[] newArr = new char[size]; \
        \
        int j = size - 1;\
        for(int i = arr.length - 1; i >= 0; i--)\{\
            if(arr[i] == '1')\{\
                newArr[j] = '1';\
            \} else \{\
                newArr[j] = '0';\
            \}\
            j--;\
        \}\
        \
        for(int i = 0; i < (newArr.length - arr.length); i++)\{\
            if(newArr[i] != '1')\{\
                newArr[i] = '0';\
            \}\
        \}\
        \
        return newArr;\
    \}\
\}\
\
}