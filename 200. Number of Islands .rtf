class Solution {
    public int numIslands(char[][] grid) {
        if (grid.length == 0) return 0;
        int count = 0;
        for (int i = 0; i < grid.length; i++){
            for (int j = 0; j < grid[0].length; j++){
                if (grid[i][j] == '1') {
                    IntoWater(grid, i, j, grid.length, grid[0].length);
                    count++;
                }
            }
        }   
        return count; 
    }
    private void IntoWater(char[][] grid, int i, int j, int n, int m) {
            if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] != '1'){
                return;
            }
            grid[i][j] = '0';
            IntoWater(grid, i + 1, j, n, m);
            IntoWater(grid, i - 1, j, n, m);
            IntoWater(grid, i, j + 1, n, m);
            IntoWater(grid, i, j - 1, n, m);
    }
}
