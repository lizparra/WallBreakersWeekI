class Solution {
        class UnionFind {
        private int[] parent; 
        private int[] rank;
        private int count = 0;
        public UnionFind(int n) {
            parent = new int[n];
            rank = new int[n];
            count = n;
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        public int find(int n) {
        	while (n != parent[n]) {
                parent[n] = parent[parent[n]];    
                n = parent[n];
            }
            return n;
        }   
        public void union(int node1, int node2) {
            int root1 = find(node1);
            int root2 = find(node2);
            if (root1 == root2) return;
            if (rank[root2] > rank[root1]) {
                parent[root1] = root2;
            }
            else {
                parent[root2] = root1;
                if (rank[root1] == rank[root2]) {
                    rank[root1]++;
                }
            }
            count--;
        }
        public int count() {
            return count;
        }
    }
    public int findCircleNum(int[][] M) {
        int n = M.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (M[i][j] == 1) uf.union(i, j);
            }
        }
        return uf.count();
    }
}
