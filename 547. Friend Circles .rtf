{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red255\green255\blue255;\red67\green91\blue103;
}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c32941\c43137\c47843;
}
\margl1440\margr1440\vieww7700\viewh17500\viewkind0
\deftab720
\pard\pardeftab720\sl400\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
547.\'a0Friend Circles\
\
\pard\pardeftab720\sl400\partightenfactor0

\f1\b0\fs24 \cf4 \cb1 class Solution \{\
        class UnionFind \{\
        private int[] parent; \
        private int[] rank;\
        private int count = 0;\
        \
        public UnionFind(int n) \{\
            parent = new int[n];\
            rank = new int[n];\
            count = n;\
            for (int i = 0; i < n; i++) \{\
                parent[i] = i;\
            \}\
        \}\
        \
        public int find(int n) \{\
        	while (n != parent[n]) \{\
                parent[n] = parent[parent[n]];    \
                n = parent[n];\
            \}\
            return n;\
        \}\
        \
        public void union(int node1, int node2) \{\
            int root1 = find(node1);\
            int root2 = find(node2);\
            if (root1 == root2) return;\
            if (rank[root2] > rank[root1]) \{\
                parent[root1] = root2;\
            \}\
            else \{\
                parent[root2] = root1;\
                if (rank[root1] == rank[root2]) \{\
                    rank[root1]++;\
                \}\
            \}\
            count--;\
        \}\
        \
        public int count() \{\
            return count;\
        \}\
    \}\
    \
    public int findCircleNum(int[][] M) \{\
        int n = M.length;\
        UnionFind uf = new UnionFind(n);\
        for (int i = 0; i < n - 1; i++) \{\
            for (int j = i + 1; j < n; j++) \{\
                if (M[i][j] == 1) uf.union(i, j);\
            \}\
        \}\
        return uf.count();\
    \}\
\}\
\
\
}